<!-----
layout: none
title: 光谱处理工具包
cover: /assets/images/retro futurism.jpg
----->
<!--more-->

<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Spectra toolkit</title>
	<script src="/assets/js/interp1.js" type="text/javascript"></script>
	<script src="/assets/js/papaparse.min.js" type="text/javascript"></script>
	<script src="https://cdn.plot.ly/plotly-2.26.0.min.js" type="text/javascript"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.11.1/math.min.js" type="text/javascript"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.9/dat.gui.min.js" type="text/javascript"></script>
</head>

<body>
	<input type="file" id="inputCSV" style="visibility: hidden;" onchange="newFile()" accept=".csv"/>
	<div id='GraphArea'></div>
</body>
<script>
	//console.log(math.subtract([5,6,8],[1,2,7]));
	var obj_list = [];
	var index = -1;
	var index1 = -1;
	var index2 = -1;
	var plot_num = 1;
	var gui = new dat.GUI();
	var layout = {
		title: {text:'Spectrum', font: {family: 'Times New Roman', size: 24}},
		xaxis: {title: {text: 'Wavelength (nm)', font: {family: 'Times New Roman', size: 18, color: '#000000'}}},  
		yaxis: {title: {text: '', font: {family: 'Times New Roman', size: 18, color: '#000000'}}},
		grid: {}
	};
	var config = {
		editable: true,
		toImageButtonOptions: {
    		format: 'svg', // one of png, svg, jpeg, webp
    		filename: 'Spectrum',
    		height: 450,
    		width: 150 + 300 * plot_num,
    		scale: 1
    	},
    	displaylogo: false,
    	responsive: true
    };
    var default_color_list = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'];
    var controls = new function () {
    	this.file = '';
    	this.counts = 0;
    	this.visible = true;
    	this.fill = false;
    	this.plotID = '1';
    	this.name = '';
    	this.object = 'None';
    	this.object1 = 'None';
    	this.object2 = 'None';
    	this.clip_range = '';
    	this.color = '#1f77b4';
    };

    var control_functions = {
    	loadFile: function() { 
    		document.getElementById('inputCSV').click();
    	},
    	exportCSV: function() {
    		var csv = Papa.unparse(math.transpose(obj_list[index].data));
    		downloadCSV(obj_list[index].name + '_modified', csv);
    	},
    	addSubplot: function() {
    		if (plot_num >= 6)
    			return;
    		plot_num++;
    		layout['xaxis' + plot_num.toString()] = {title: {text: 'Wavelength (nm)', font: {family: 'Times New Roman', size: 18, color: '#000000'}}};
    		layout['yaxis' + plot_num.toString()] = {title: {text: '', font: {family: 'Times New Roman', size: 18, color: '#000000'}}};
    		switch (plot_num) {
    		case 2: 
    			layout.grid.rows = 1;
    			layout.grid.columns = 2;
    			layout.grid.pattern = 'independent';
    			break;
    		case 3:
    			layout.grid.rows = 1;
    			layout.grid.columns = 3;
    			layout.grid.pattern = 'independent';
    			break;
    		case 4:
    			layout.grid.rows = 2;
    			layout.grid.columns = 2;
    			layout.grid.pattern = 'independent';
    			break;
    		case 5:
    		case 6:
    			layout.grid.rows = 2;
    			layout.grid.columns = 3;
    			layout.grid.pattern = 'independent';
    			break;
    		}
    		updatePlotIDGui();
    	},
    	deleteSubplot: function() {
    		if (plot_num == 1)
    			return;
    		plot_num--;
    		switch (plot_num) {
    		case 1:
    			layout.grid.rows = 1;
    			layout.grid.columns = 1;
    			layout.grid.pattern = 'independent';
    			break;
    		case 2: 
    			layout.grid.rows = 1;
    			layout.grid.columns = 2;
    			layout.grid.pattern = 'independent';
    			break;
    		case 3:
    			layout.grid.rows = 1;
    			layout.grid.columns = 3;
    			layout.grid.pattern = 'independent';
    			break;
    		case 4:
    			layout.grid.rows = 2;
    			layout.grid.columns = 2;
    			layout.grid.pattern = 'independent';
    			break;
    		case 5:
    			layout.grid.rows = 2;
    			layout.grid.columns = 3;
    			layout.grid.pattern = 'independent';
    			break;
    		}
    		for (var i = 0; i < obj_list.length; i++)
    			if (obj_list[i].axes > plot_num)
    				obj_list[i].axes = plot_num;
    			updatePlotIDGui();
    			plotID_gui.setValue(obj_list[index].axes.toString());
    			plotly();
    		//layout['xaxis' + (plot_num + 1).toString()] = undefined;
    		//layout['yaxis' + (plot_num + 1).toString()] = undefined;	
    	},
    	normalizePeak: function() {
    		if (index != -1) {
    			var peak = Math.max(...obj_list[index].data[1]);
    			if (peak != 1) {
    				obj_list[index].data[1] = math.multiply(obj_list[index].data[1], 1 / peak);
    				plotly();
    			}
    		}
    	},
    	normalizeArea: function() {
    		if (index != -1) {
    			var area = trapz(obj_list[index].data[0], obj_list[index].data[1]);
    			if (area != 1) {
    				obj_list[index].data[1] = math.multiply(obj_list[index].data[1], 1 / area);
    				plotly();
    			}
    		}
    	},
		//Binary Functions
    	overlap: function() {
			if (index1 != -1 && index2 != -1) {//index1--emission; index2--absorption
				var overlap = calcOverlapIntegral(obj_list[index1].data, obj_list[index2].data);
				if (overlap == 0)
					return;
				console.log('Overlap Integral between ' + obj_list[index1].name + '(emi) and ' + obj_list[index2].name + '(abs) is: ', trapz(overlap[0], overlap[1]));
				var name = 'J-int_' + obj_list[index1].name + '_' + obj_list[index2].name;
				obj_list.push(new Spectrum(name, overlap, true, default_color_list[obj_list.length % 10]));
				controls.counts += 1;
				counts_gui.setValue(controls.counts);
				plotly();
				updateObjGui();
			}
		},
		difference: function() {
			if (index1 != -1 && index2 != -1) {
				var data1 = obj_list[index1].data;
				var data2 = obj_list[index2].data;
				var axisMin = Math.max(Math.min(...data1[0]), Math.min(...data2[0]));
				var axisMax = Math.min(Math.max(...data1[0]), Math.max(...data2[0]));
				if (axisMax <= axisMin)
					return 0;//no overlap
				else {
					let data1_left = math.subset(data1, math.index([0, 1], math.smallerEq(data1[0], axisMax)));
					var data1_clip = math.subset(data1_left, math.index([0, 1], math.largerEq(data1_left[0], axisMin)));
					let data2_left = math.subset(data2, math.index([0, 1], math.smallerEq(data2[0], axisMax)));
					var data2_clip = math.subset(data2_left, math.index([0, 1], math.largerEq(data2_left[0], axisMin)));
				}
				var data1_range = data1_clip[0][data1_clip[0].length - 1] - data1_clip[0][0];
				var data2_range = data2_clip[0][data2_clip[0].length - 1] - data2_clip[0][0];
				var data1_longer = data1_range > data2_range;
				
				if (data1_longer) {
					data1_clip[1] = interp1(data1_clip[0], data1_clip[1], data2_clip[0], 'linear');
					data1_clip[0] = data2_clip[0];
				}
				else {
					data2_clip[1] = interp1(data2_clip[0], data2_clip[1], data1_clip[0], 'linear');
					data2_clip[0] = data1_clip[0];
				}
				data1_clip[1] = math.subtract(data1_clip[1], data2_clip[1]);
				var name = 'Diff_' + obj_list[index1].name + '_' + obj_list[index2].name;
				obj_list.push(new Spectrum(name, data1_clip, true, default_color_list[obj_list.length % 10]));
				controls.counts += 1;
				counts_gui.setValue(controls.counts);
				plotly();
				updateObjGui();
			}
		}
	};

	//Files & Figures operation
	var file_gui = gui.addFolder('Files and Figures');
	file_gui.open();
	file_gui.add(control_functions, 'loadFile').name("Load CSV file");
	var counts_gui = file_gui.add(controls, 'counts').name("Data Stored:");
	counts_gui.__input.disabled = true;
	file_gui.add(control_functions, 'addSubplot').name("Add a Subplot");
	file_gui.add(control_functions, 'deleteSubplot').name("Delete a Subplot");

	//Unary operation
	var unary_operation_gui = gui.addFolder('Unary Operation');
	unary_operation_gui.open();
	var obj_gui = unary_operation_gui.add(controls, 'object', obj_list.map(item => item.name).concat(['None'])).name("Object:");
	var unary_display_gui = unary_operation_gui.addFolder('Display');
	//unary_display_gui.open();
	var unary_functions_gui = unary_operation_gui.addFolder('Functions');
	unary_functions_gui.open();

	var visible_gui = unary_display_gui.add(controls, 'visible').name("Visible:");
	var fill_gui = unary_display_gui.add(controls, 'fill').name("Fill:");
	var name_gui = unary_display_gui.add(controls, 'name').name("Name:");
	var plotID_gui = unary_display_gui.add(controls, 'plotID', math.string(math.range(1, plot_num + 1)._data)).name("Plot ID:");
	var color_gui = unary_display_gui.addColor(controls, 'color').name("Color:");

	unary_functions_gui.add(control_functions, 'exportCSV').name("Export to .csv file");
	unary_functions_gui.add(control_functions, 'normalizePeak').name("Normalize (Peak)");
	unary_functions_gui.add(control_functions, 'normalizeArea').name("Normalize (Area)");
	var clip_gui = unary_functions_gui.add(controls, 'clip_range').name("Clip Range:");

	//Binary operation
	var binary_operation_gui = gui.addFolder('Binary Operation');
	binary_operation_gui.open();
	var obj1_gui = binary_operation_gui.add(controls, 'object1', obj_list.map(item => item.name).concat(['None'])).name("Object1:");
	var obj2_gui = binary_operation_gui.add(controls, 'object2', obj_list.map(item => item.name).concat(['None'])).name("Object2:");
	var binary_functions_gui = binary_operation_gui.addFolder('Functions');
	binary_functions_gui.open();
	binary_functions_gui.add(control_functions, 'difference').name("Difference");
	binary_functions_gui.add(control_functions, 'overlap').name("J-overlap integral");

	visible_gui.onFinishChange(function(value) {
		if (index != -1) {
			obj_list[index].visible = value;
			plotly();
		}
	});

	fill_gui.onFinishChange(function(value) {
		plotly();
	});

	name_gui.onFinishChange(function(value) {
		if (index != -1) {
			obj_list[index].name = value;
			updateObjGui();
			obj_gui.setValue(value);
			plotly();
		}
	});

	clip_gui.onFinishChange(function(value) {
		if (index != -1) {
			var split = value.replace(/[0-9]/ig,"");//delete number to get the split character
			var range = value.split(split).map(Number);
			var data_tmp = math.subset(obj_list[index].data, math.index([0, 1], math.smallerEq(obj_list[index].data[0], Math.max(...range))));
			obj_list[index].data = math.subset(data_tmp, math.index([0, 1], math.largerEq(data_tmp[0], Math.min(...range))));
			plotly();
		}
	});

	color_gui.onFinishChange(function(value) {
		if (index != -1) {
			obj_list[index].color = value;
			plotly();
		}
	});

	plotID_gui.onFinishChange(function(value) {
		if (index != -1) {
			obj_list[index].axes = Number(value);
			plotly();			
		}
	});

	obj_gui.onFinishChange(function(value) {
		index = obj_list.map(item => item.name).indexOf(value);
		if (index != -1) {
			visible_gui.setValue(obj_list[index].visible);
			name_gui.setValue(obj_list[index].name);
			color_gui.setValue(obj_list[index].color);
			plotID_gui.setValue(obj_list[index].axes.toString());
		}
	});

	obj1_gui.onFinishChange(function(value) {
		index1 = obj_list.map(item => item.name).indexOf(value);
	});

	obj2_gui.onFinishChange(function(value) {
		index2 = obj_list.map(item => item.name).indexOf(value);
	});

	function calcOverlapIntegral(emission, absorption) {
		var area = trapz(emission[0], emission[1]);
		if (area != 1)
			emission[1] = math.multiply(emission[1], 1 / area);
		var axisMin = Math.max(Math.min(...emission[0]), Math.min(...absorption[0]));
		var axisMax = Math.min(Math.max(...emission[0]), Math.max(...absorption[0]));
		if (axisMax <= axisMin)
			return 0;//no overlap
		else {
			let emission_left = math.subset(emission, math.index([0, 1], math.smallerEq(emission[0], axisMax)));
			var emission_clip = math.subset(emission_left, math.index([0, 1], math.largerEq(emission_left[0], axisMin)));
			let absorption_left = math.subset(absorption, math.index([0, 1], math.smallerEq(absorption[0], axisMax)));
			var absorption_clip = math.subset(absorption_left, math.index([0, 1], math.largerEq(absorption_left[0], axisMin)));
		}
		var emission_range = emission_clip[0][emission_clip[0].length - 1] - emission_clip[0][0];
		var absorption_range = absorption_clip[0][absorption_clip[0].length - 1] - absorption_clip[0][0];
		var long_range = emission_range > absorption_range ? emission_clip : absorption_clip;
		var short_range = emission_range < absorption_range ? emission_clip : absorption_clip;
		long_range[1] = interp1(long_range[0], long_range[1], short_range[0], 'linear');
		long_range[0] = short_range[0];
		var overlap = math.dotMultiply(math.dotMultiply(long_range[1], short_range[1]), math.dotPow(short_range[0], 4));
		return [short_range[0], overlap];
	}

	function hexToRgb(hex) {
		var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
		return result ? {
			r: parseInt(result[1], 16),
			g: parseInt(result[2], 16),
			b: parseInt(result[3], 16)
		} : null;
	}

	function Spectrum(name, data, visible, color, width, axes = 1) {
		this.name = name;
		this.data = data;
		this.visible = visible;
		this.axes = axes;
		this.color = color;
		this.width = width;
	}

	function PlotData(x, y, type, name, color, width, xaxis, yaxis, fill) {//color in hex format
		var rgb = hexToRgb(color);
		this.x = x;
		this.y = y;
		this.type = type;
		this.name = name;
		this.line = {
			color: 'rgb(' + [rgb.r, rgb.g, rgb.b].toString() + ')',
			width: width
		};
		this.xaxis = xaxis;
		this.yaxis = yaxis;
		this.fill = fill ? 'tozeroy' : undefined
	}

	function plotly() {
		var data_list = [];
		for (var i = 0; i < obj_list.length; i++)
			if (obj_list[i].visible)
				data_list.push(new PlotData(obj_list[i].data[0], obj_list[i].data[1], 'lines', obj_list[i].name, obj_list[i].color, obj_list[i].width, 'x' + obj_list[i].axes, 'y' + obj_list[i].axes, fill_gui.getValue()));
		config.toImageButtonOptions.width = 150 + 300 * plot_num;
		Plotly.newPlot('GraphArea', data_list , layout, config);
	}

	function newFile() {
		const inputCSV = document.getElementById('inputCSV');
		const file = inputCSV.files[0];
		Papa.parse(file, {
			dynamicTyping: true,
			skipEmptyLines: 'greedy',
			complete: function(results, file) {
				var data = math.transpose(results.data);
				var name = file.name.replace('.csv', '');
				obj_list.push(new Spectrum(name, data, true, default_color_list[obj_list.length % 10]));
				controls.counts += 1;
				counts_gui.setValue(controls.counts);
				plotly();
				updateObjGui();
			}
		});
	}

	function updateObjGui() {
		var name_list = obj_list.map(item => item.name).concat(['None']);
		var innerHTMLStr = "";
		for (var i = 0; i < name_list.length; i++) {
			var str = "<option value='" + name_list[i] + "'>" + name_list[i] + "</option>";
			innerHTMLStr += str;        
		}
		obj_gui.domElement.children[0].innerHTML = innerHTMLStr;
		obj1_gui.domElement.children[0].innerHTML = innerHTMLStr;
		obj2_gui.domElement.children[0].innerHTML = innerHTMLStr;
		obj_gui.setValue(obj_list[obj_list.length - 1].name);	
		obj1_gui.setValue(obj_list[obj_list.length - 1].name);
		if (obj_list.length >= 2)
			obj2_gui.setValue(obj_list[obj_list.length - 2].name);
		else
			obj2_gui.setValue(obj_list[obj_list.length - 1].name);
	}

	function updatePlotIDGui() {
		var plotID_list = math.string(math.range(1, plot_num + 1)._data);
		var innerHTMLStr = "";
		for (var i = 0; i < plotID_list.length; i++) {
			var str = "<option value='" + plotID_list[i] + "'>" + plotID_list[i] + "</option>";
			innerHTMLStr += str;        
		}
		plotID_gui.domElement.children[0].innerHTML = innerHTMLStr;
	}

	function trapz(x, y) {
		var y1 = math.subset(y, math.index(math.range(0,y.length-1)));
		var y2 = math.subset(y, math.index(math.range(1,y.length)));
		var y_av = math.multiply(math.add(y1, y2),0.5);
		return math.multiply(math.diff(x),y_av);
	}

	function downloadCSV(fileName, content) {
		let a = document.createElement('a');
		a.href = 'data:text/plain;charset=utf-8,' + content
		a.download = fileName + '.csv';
		document.body.appendChild(a);
		a.click();
		document.body.removeChild(a);
	}
</script>
</html>